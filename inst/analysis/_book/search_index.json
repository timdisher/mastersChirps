[["import-and-clean-data.html", "2 Import and Clean Data 2.1 Selection Data 2.2 Leaderboard Data 2.3 Calculate Daily Scores for Pool Participants", " 2 Import and Clean Data 2.1 Selection Data The original dataset was organized based on how the the pool was run with picks in columns. We will want to make this much wider by having each golfer as a column with a binary indicator of whether or not a given member of the pool selected them. We create some variable tests at the same time. data(&quot;entry_picks_anon&quot;) wide_dat &lt;- entry_picks_anon %&gt;% pivot_longer(cols = -alt_name) %&gt;% mutate(name = value, value = 1) %&gt;% pivot_wider(names_from = name, values_from= value) %&gt;% mutate_at(vars(-alt_name), ~ ifelse(is.na(.), 0, .)) report &lt;- data_validation_report() golfers &lt;- entry_picks_anon %&gt;% select(-alt_name) %&gt;% unlist() %&gt;% unique test_picks &lt;- all(wide_dat %&gt;% mutate(tot_pick = rowSums(across( `Jon Rahm`:`Robert MacIntyre` ))) %&gt;% pull(tot_pick) == 8) validate(wide_dat, &quot;Validate player selection data&quot;) %&gt;% validate_if(description = &quot;Verify everyone has 8 picks and nobody has any NA&quot;, all(test_picks), ) %&gt;% validate_cols(description = &quot;Test all values are 0 or 1&quot;, in_set(0, 1), -alt_name) %&gt;% validate_if(description = &quot;Test all 272 players are present&quot;, nrow(wide_dat) == 272) %&gt;% validate_if(description = &quot;Test all golders are present&quot;, all(golfers %in% colnames(wide_dat))) %&gt;% add_results(report) 2.2 Leaderboard Data The leaderboard data has to be organized in order to allow for calculating the daily ranks of each player. This data is pulled directly from the ESPN leaderboard using the rvest package. Code for html scraping can be found in /data-raw/leaderboard.R. data(&quot;leaderboard&quot;) datatable(leaderboard, rownames = FALSE, colnames = c(&quot;Player&quot;, &quot;Position&quot;, &quot;Total Score&quot;, paste(&quot;Day&quot;, 1:4))) The rules for the pool were not entirely clear with respect to handling players that didn’t make the second day cut, but it seemed to follow that they just kept their original ranking from the end of day 2. This is a little different from the official leaderboard, where DQs are dropped to the bottom. We use rowCumsums to get the cumulative score for each player and then call a quick custom ranking function to make sure ties are coded correctly. All golfers are included in the first day and then those in the group that made the day 2 cut are then separated out after that. Players who don’t make the cut still have their day 2 ranks carried forward. # Order of variables for later order &lt;- quo(c(player:tot, r1:r4, r1_rank, r2_rank, r3_rank, r4_rank)) # Day 1:2 pre_cut &lt;- leaderboard %&gt;% dplyr::select(r1:r2) %&gt;% as.matrix() %&gt;% matrixStats::rowCumsums() %&gt;% # Get cumulative score `colnames&lt;-`(paste0(&quot;r&quot;,1:2)) %&gt;% cbind(leaderboard %&gt;% dplyr::select(-c(r1:r2))) %&gt;% tibble::as_tibble() %&gt;% ties(., var = r1) %&gt;% # Score ties for day 1 ties(., var = r2) # Score ties for day 2 # Day 3 on limited to those who made the cut. Start from full leaderboard # to make sur eyou get the right cumulative scores made_cut &lt;- leaderboard %&gt;% dplyr::filter(!is.na(pos)) ranks_made &lt;- made_cut %&gt;% dplyr::select(r1,r2,r3,r4) %&gt;% as.matrix() %&gt;% matrixStats::rowCumsums() %&gt;% # na.rm by default `colnames&lt;-`(paste0(&quot;r&quot;,1:4)) %&gt;% cbind(made_cut %&gt;% dplyr::select(-c(r1,r2,r3,r4))) %&gt;% tibble::as_tibble() %&gt;% ties(., var = r3) %&gt;% ties(., var = r4) %&gt;% left_join(pre_cut %&gt;% select(player, ends_with(&quot;rank&quot;))) %&gt;% select(!! order) ## Joining, by = &quot;player&quot; ranks_cut &lt;- pre_cut %&gt;% dplyr::filter(is.na(pos)) %&gt;% dplyr::mutate(r3_rank = r2_rank, r4_rank = r2_rank) %&gt;% select(!! order) score_dat &lt;- rbind(ranks_made, ranks_cut) # Add data tests validate(score_dat, &quot;Validate leaderboard data&quot;) %&gt;% validate_if(all(ranks_made$pos == ranks_made$r4_rank), description = &quot;Verify ranks calculated by hand against the current position. If TRUE, assumes the other days are correct as well.&quot;) %&gt;% validate_if(description = &quot;Test that highest score matches current score. Assume all the other days are correct if passes&quot;,all(ranks_made$r4 == ranks_made$tot)) %&gt;% add_results(report) 2.3 Calculate Daily Scores for Pool Participants The final step of data prep is to combine the golfer daily scores with the player choices in order to calculate the score of each day of the tournament. This is calculated as the sum of the ranks of the players that each person chose. For example if your 8 players are in positions 1, 2, 3, 4, 5, 6, 7, 8 then your score would be 36. A first step here however is to correct some differences in the names between the pool and the ESPN leaderboard. These are just some small spelling differences that are easier to change in leaderboard data than the other. golfers[!golfers %in% score_dat$player] ## [1] &quot;Bryson Dechambeau&quot; &quot;Ollie Osborne&quot; &quot;Tyler Strafaci&quot; score_dat &lt;- score_dat %&gt;% mutate(player = case_when(player == &quot;Bryson DeChambeau&quot; ~ &quot;Bryson Dechambeau&quot;, player == &quot;Charles Osborne (a)&quot; ~ &quot;Ollie Osborne&quot;, player == &quot;Tyler Strafaci (a)&quot; ~ &quot;Tyler Strafaci&quot;, TRUE ~ player)) The final step in data prep is to calculate the daily scores for everyone in the pool. This is done by looping over rows in the pick data frame and and then for each user calculate the sum of their player ranks for each day by matching them to the score data. We test these against the ground-truth official scores for a few key users and add those results to the validation report. There are plenty of code inefficiencies here (row-wise operations are pretty slow) and a better approach would be to also scrape the final results and confirm they all match instead of just looking at this group. This will have to do for now though! pick_dat &lt;- entry_picks_anon %&gt;% select(-alt_name) final_scores &lt;- apply(pick_dat, 1, function(x) { # For each set of picks iterate over days map(paste0(&quot;r&quot;,1:4,&quot;_rank&quot;), ~ { day &lt;- . rank_day &lt;- score_dat %&gt;% select(player, all_of(day)) sum(rank_day[match(x, rank_day$player), day]) }) %&gt;% do.call(cbind, .) %&gt;% as_tibble %&gt;% set_names(paste0(&quot;score_&quot;, 1:4)) }) %&gt;% do.call(rbind, .) %&gt;% bind_cols(alt_name = entry_picks_anon$alt_name) test_names &lt;- c(&quot;Eastin, John&quot; = 309, #ES1 &quot;Morlock, Geya&quot; = 276, #ES2 &quot;Williams, Cameron&quot; = 242, #ES3 &quot;Ross, Macie&quot; = 252, #ES4 &quot;el-Afzal, Haazima&quot; = 279 #ES5 ) validate(final_scores, description = &quot;Validate score calculation algorithm&quot;) %&gt;% validate_if(description = &quot;Validate final scores against official scores for ES staff&quot;, all(final_scores %&gt;% filter(alt_name %in% all_of(names(test_names))) %&gt;% pull(score_4) == test_names)) %&gt;% add_results(report) Finally we print the validation report print(report) ## Validation summary: ## Number of successful validations: 7 ## Number of failed validations: 0 ## Number of validations with warnings: 0 ## ## Advanced view: ## ## ## |table_name |description |type | total_violations| ## |:------------------------------|:------------------------------------------------------------------------------------------------------------------|:-------|----------------:| ## |final_scores |Validate final scores against official scores for ES staff |success | NA| ## |Validate leaderboard data |Test that highest score matches current score. Assume all the other days are correct if passes |success | NA| ## |Validate leaderboard data |Verify ranks calculated by hand against the current position. If TRUE, assumes the other days are correct as well. |success | NA| ## |Validate player selection data |Test all 272 players are present |success | NA| ## |Validate player selection data |Test all golders are present |success | NA| ## |Validate player selection data |Test all values are 0 or 1 |success | NA| ## |Validate player selection data |Verify everyone has 8 picks and nobody has any NA |success | NA| "]]
